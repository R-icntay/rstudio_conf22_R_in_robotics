{
  "hash": "f6c1f8b637882e0a4ad3bb5bdf4cb086",
  "result": {
    "markdown": "---\ntitle: \"R and Arduino\"\nauthor: \"Eric Wanjau and Ian Muchiri\"\ntoc: true\ntoc-location: left\nformat: \n  html:\n    self-contained: true\n    number-sections: true\n    code-tools: true\n    code-fold: false\n    code-link: true\neditor: visual\nexecute: \n  warning: false\n  message: false\n  eval: false\nbibliography: references.bib\n---\n\n\n## The R in Arduino\n\nThis notebook briefly describes how we set up a communication interface between R and a microcontroller ( Arduino). Most of it is based on a blog post we wrote a while back: [*What we R about when we R about R and Arduino*](https://rpubs.com/eR_ic/rduino)***.***\n\n[`Arduino`](https://www.arduino.cc/en/Guide/Introduction) is an open-source electronics platform based on easy-to-use hardware (`Arduino Board`) and software (`Arduino IDE`). One can tell the board what to do if one has the correct form of data and a set of instructions for processing the data and performing subsequent operations. The Arduino's microcontroller is responsible for holding all your compiled code and executing the commands you specify. The Arduino Software on the other hand is the board's IDE where one writes the set of instructions governing the board. The getting [started guide](https://www.arduino.cc/en/Guide) would be a good place to start learning about the Arduino ecosystem.\n\nSwitching over to R, we couldn't have found better words to summarize what `R` is than with these words found in the book [Advanced R](https://adv-r.hadley.nz/introduction.html) by `Hadley Wickham`: Despite its sometimes frustrating quirks, R is, at its heart, an elegant and beautiful language, well tailored for data science ðŸ¤—.\n\nWith all this said, a fine convergence can be struck between the two: `data`. Consider this very simple example. We want the Arduino board to turn an LED (Light Emitting Diode) ON once it receives a `1` and OFF once it receives a `0`. If one can get a way of sending some data (1 or 0) to the board's microcontroller, then, the set objective will be achieved sooner or later.\n\n### Setting up a serial connection between R and Arduino\n\nSerial communication is the communication protocol that will be used between R and the Arduino software similar to what is used in the Arduino serial monitor. This communication interface will facilitate the transmission of data between the two interfaces.\n\nThe serial package [@serial] will be used to set up this comunication interface.\n\nLet's begin by loading the required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(serial)\nlibrary(here)\n```\n:::\n\n\nNext, we'll create a serial port object called `arduino`, which represents a serial client for communication with the USB serial port where our board is connected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# See the ports available\nlistPorts()\n```\n:::\n\n\nCreate an Arduino object and set up the interface parameters.\n\nThis is achieved using the `serial::serialConnection` function. The interface parameters are such that the baud rate (specifies the number of bits being transferred per second) is set to `9600`, which is the same value in the Arduino script. Also, we have specified that the transmission ends with a new line and that the transmission is complete if the end of line symbol is the `carriage return cr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narduino <-  serialConnection(name = \"aRduino\",\n                           port = \"COM5\",\n                           mode = \"9600,n,8,1\" ,\n                           buffering = \"none\",\n                           newline = TRUE,\n                           eof = \"\",\n                           translation = \"cr\",\n                           handshake = \"none\",\n                           buffersize = 8096\n                           \n                           )\n```\n:::\n\n\nNow that the serial interface is in place, the next step is initialising the interface and keeping it open for later usage such as writing and reading data from it. Once `serial::isOpen` initialises the interface, the Arduino board blinks. This is because the board resets once a serial port is opened to allow the bootloader to receive a new sketch.\n\n`serial::isOpen` tests whether the connection is open or not.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nopen(arduino)\n\n# testing whether the connection is open or not\nisOpen(arduino)\n```\n:::\n\n\n### **Writing data from RStudio to the serial interface**\n\nAt this point, we are all set to write some data to the serial interface.\n\nLet's prepare some data to send to the serial interface.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create dummy data\nn = 42\narduino_input <- tibble(\n  c = sample(10:100, size = n, replace = T) %>%\n                     paste('C', sep = ''))\n```\n:::\n\n\nThe chunk below uses `serial::write.serialConnection()` to write the LED values to the serial port row by row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclose(arduino)\nopen(arduino)\nSys.sleep(3)\nfor (r in 1:nrow(arduino_input)){\n  Sys.sleep(0.3)\n  write.serialConnection(arduino, paste(arduino_input[r,], collapse = ''))\n}\nSys.sleep(2)\n```\n:::\n\n\n### Driving the manipulator's servo motors\n\nThe Arduino board itself is a programmable platform. You can tell your board what to do by sending a set of instructions to the microcontroller on the board. To do so you use the [Arduino programming language](https://www.arduino.cc/en/Reference/HomePage) and [the Arduino Software (IDE)](https://www.arduino.cc/en/Main/Software). Here are sample instructions that were uploaded to the microcontroller:\n\n``` {.cpp style=\"color: #70AD47\"}\n\nif(Serial.available()){ // checks data in serial\n\n  static int t=0;\n\n    char mychar=Serial.read(); // reads serial data\n\n    switch(mychar){      \n\n      case '0'...'9':\n\n        t=t*10 + mychar - '0â€™; // parse integersâ€‹\n\n        break;\n\n      case 'A':\n\n        {\n\n            servoA.write(t,50,1); // write value to motor\n\n            Serial.println(t); // print data to serial\n\n        }\n\n        t=0;â€‹\n\n        break;â€‹\n\n        ...â€‹\n\n    }\n```\n\nOn a very high level, the microcontroller:\n\n-   Checks whether data is available on the serial interface.\n\n-   Reads the data one byte at a time\n\n-   Uses a series of switch case commands to\n\n    -   Parse integers\n\n    -   Write motor angles (send an electrical signal) to each respective motor based on the motor's tag e.g `A`, `B` or `C`\n\nSo how do the servo motors actually rotate? Servos are controlled using adjustable pulse widths on the signal line. This is achieved using a technique called `Pulse Width Modulation`. PWM is a modulation technique that generates variable-width pulses to represent the amplitude of an analog input signal.\n\nFor a standard servo, sending a `1 ms 5V` pulse turns the motor to `0` degrees, and sending a `2 ms 5V` pulse turns the motor to `180` degrees, with pulse lengths in the middle scaling linearly. A `1.5 ms` pulse, for example, turns the motor to 90 degrees. Once a pulse has been sent, the servo turns to that position and stays there until another pulse instruction is received. However, if you want a servo to \"hold\" its position (resist being pushed on and try to maintain the exact position), you just resend the command once every 20 ms. The Arduino servo commands e.g `servo.write` takes care of all this for you. To better understand how servo control works, please see the timing diagram:\n\n![Servo motor timing diagram: Jeremy Blum - Exploring Arduino](images/servo_timing.PNG){width=\"500\"}\n\nA great place to get started with Arduino and some hobby electronics projects would be @blum2013exploring.\n\n### **Reading data sent from Arduino board**\n\nWe can read the values sent to the serial port connection by Arduino script using `read.serialConnection()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_frm_arduino <- tibble(capture.output(cat(read.serialConnection(arduino)))) %>% \n  filter(if_any(where(is.character), ~ .x != \"\"))\n\n\ndata_frm_arduino\n```\n:::\n\n\n### Summary\n\nThere we go! In this section, we leveraged Arduino's capability to be programmed via a serial interface to send and receive data from R to the Arduino board.\n\nPlease do feel free to reach out in case of any questions, feedback and suggestions.\n\nHappy Learning,\n\n[Eric](https://twitter.com/ericntay).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}